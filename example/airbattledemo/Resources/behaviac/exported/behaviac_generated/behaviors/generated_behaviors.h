// ---------------------------------------------------------------------
/*
This file is auto-generated by behaviac designer, so please don't modify it by yourself!


Usage: include this file in a certain cpp accordingly, only include it once and don't include it in other cpps again.
(RELATIVE_PATH is the path where it is generated):
and you also need to include your agent types' headers before it:

      #include "YourAgentTypes.h"

      #include "RELATIVE_PATH/generated_behaviors.h"
*/

// Export file: exported/behaviac_generated/behaviors/generated_behaviors.h
// ---------------------------------------------------------------------

// You should set the include path of the behaviac lib in your project
// for using the following header files :
#pragma once
#include "behaviac/behaviortree/behaviortree.h"
#include "behaviac/agent/agent.h"
#include "behaviac/agent/taskmethod.h"

#include "behaviac/behaviortree/nodes/actions/action.h"
#include "behaviac/behaviortree/nodes/actions/assignment.h"
#include "behaviac/behaviortree/nodes/actions/compute.h"
#include "behaviac/behaviortree/nodes/actions/noop.h"
#include "behaviac/behaviortree/nodes/actions/wait.h"
#include "behaviac/behaviortree/nodes/actions/waitforsignal.h"
#include "behaviac/behaviortree/nodes/actions/waitframes.h"
#include "behaviac/behaviortree/nodes/composites/compositestochastic.h"
#include "behaviac/behaviortree/nodes/composites/ifelse.h"
#include "behaviac/behaviortree/nodes/composites/parallel.h"
#include "behaviac/behaviortree/nodes/composites/query.h"
#include "behaviac/behaviortree/nodes/composites/referencebehavior.h"
#include "behaviac/behaviortree/nodes/composites/selector.h"
#include "behaviac/behaviortree/nodes/composites/selectorloop.h"
#include "behaviac/behaviortree/nodes/composites/selectorprobability.h"
#include "behaviac/behaviortree/nodes/composites/selectorstochastic.h"
#include "behaviac/behaviortree/nodes/composites/sequence.h"
#include "behaviac/behaviortree/nodes/composites/sequencestochastic.h"
#include "behaviac/behaviortree/nodes/composites/withprecondition.h"
#include "behaviac/behaviortree/nodes/conditions/and.h"
#include "behaviac/behaviortree/nodes/conditions/conditionbase.h"
#include "behaviac/behaviortree/nodes/conditions/condition.h"
#include "behaviac/behaviortree/nodes/conditions/false.h"
#include "behaviac/behaviortree/nodes/conditions/or.h"
#include "behaviac/behaviortree/nodes/conditions/true.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwaysfailure.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwaysrunning.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwayssuccess.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorcount.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorcountlimit.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorfailureuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorframes.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoriterator.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorlog.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorloop.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorloopuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratornot.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorrepeat.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorsuccessuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratortime.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorweight.h"
#include "behaviac/behaviortree/attachments/event.h"
#include "behaviac/behaviortree/attachments/attachaction.h"
#include "behaviac/behaviortree/attachments/precondition.h"
#include "behaviac/behaviortree/attachments/effector.h"
#include "behaviac/htn/task.h"
#include "behaviac/fsm/fsm.h"
#include "behaviac/fsm/state.h"
#include "behaviac/fsm/startcondition.h"
#include "behaviac/fsm/transitioncondition.h"
#include "behaviac/fsm/waitstate.h"
#include "behaviac/fsm/waitframesstate.h"
#include "behaviac/fsm/alwaystransition.h"
#include "behaviac/fsm/waittransition.h"

// You should set the agent header files of your game
// when exporting cpp files in the behaviac editor:

using namespace behaviac;

// Agent property and method handlers

namespace behaviac
{
	struct METHOD_TYPE_behaviac_Agent_VectorAdd { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorAdd>(IList& p0, System::Object& p1)
	{
		this->behaviac::Agent::VectorAdd(p0, p1);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorClear { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorClear>(IList& p0)
	{
		this->behaviac::Agent::VectorClear(p0);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorContains { };
	template<>  bool Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorContains>(IList& p0, System::Object& p1)
	{
		return this->behaviac::Agent::VectorContains(p0, p1);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorLength { };
	template<>  int Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorLength>(IList& p0)
	{
		return this->behaviac::Agent::VectorLength(p0);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorRemove { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorRemove>(IList& p0, System::Object& p1)
	{
		this->behaviac::Agent::VectorRemove(p0, p1);
	}

}

struct METHOD_TYPE_Enemy_getEnemyType { };
template<>  int Enemy::_Execute_Method_<METHOD_TYPE_Enemy_getEnemyType>()
{
	return this->Enemy::getEnemyType();
}

struct METHOD_TYPE_Enemy_getRandomSpeedByInitSpeed { };
template<>  float Enemy::_Execute_Method_<METHOD_TYPE_Enemy_getRandomSpeedByInitSpeed>(float p0)
{
	return this->Enemy::getRandomSpeedByInitSpeed(p0);
}

struct METHOD_TYPE_Enemy_getSpeed { };
template<>  float Enemy::_Execute_Method_<METHOD_TYPE_Enemy_getSpeed>()
{
	return this->Enemy::getSpeed();
}

struct METHOD_TYPE_Enemy_isAlive { };
template<>  bool Enemy::_Execute_Method_<METHOD_TYPE_Enemy_isAlive>()
{
	return this->Enemy::isAlive();
}

struct METHOD_TYPE_Enemy_setSpeed { };
template<>  void Enemy::_Execute_Method_<METHOD_TYPE_Enemy_setSpeed>(float p0)
{
	this->Enemy::setSpeed(p0);
}

struct PROPERTY_TYPE_Hero_m_isAI { };
template<>  bool& Hero::_Get_Property_<PROPERTY_TYPE_Hero_m_isAI>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(Hero, Hero::m_isAI);
	return *(reinterpret_cast<bool*>(pc));
}

struct METHOD_TYPE_Hero_AdjustHeroPosition { };
template<>  void Hero::_Execute_Method_<METHOD_TYPE_Hero_AdjustHeroPosition>()
{
	this->Hero::AdjustHeroPosition();
}

struct METHOD_TYPE_Hero_EscapeEnemyCrash { };
template<>  void Hero::_Execute_Method_<METHOD_TYPE_Hero_EscapeEnemyCrash>()
{
	this->Hero::EscapeEnemyCrash();
}

struct METHOD_TYPE_Hero_findAnEnemyAndAttack { };
template<>  void Hero::_Execute_Method_<METHOD_TYPE_Hero_findAnEnemyAndAttack>()
{
	this->Hero::findAnEnemyAndAttack();
}

struct METHOD_TYPE_Hero_findAnNearestEnemy { };
template<>  void Hero::_Execute_Method_<METHOD_TYPE_Hero_findAnNearestEnemy>()
{
	this->Hero::findAnNearestEnemy();
}

struct METHOD_TYPE_Hero_hasEnemyInFrontCanAttack { };
template<>  bool Hero::_Execute_Method_<METHOD_TYPE_Hero_hasEnemyInFrontCanAttack>()
{
	return this->Hero::hasEnemyInFrontCanAttack();
}

struct METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy { };
template<>  bool Hero::_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy>()
{
	return this->Hero::isWillBeCrashOnNearestEnemy();
}

struct METHOD_TYPE_Hero_wait20Frame { };
template<>  bool Hero::_Execute_Method_<METHOD_TYPE_Hero_wait20Frame>()
{
	return this->Hero::wait20Frame();
}

struct PROPERTY_TYPE_NPC_Level1Up_Score { };
template<>  int& NPC::_Get_Property_<PROPERTY_TYPE_NPC_Level1Up_Score>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::Level1Up_Score);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_NPC_Level2Up_Score { };
template<>  int& NPC::_Get_Property_<PROPERTY_TYPE_NPC_Level2Up_Score>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::Level2Up_Score);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_NPC_Level3Up_Score { };
template<>  int& NPC::_Get_Property_<PROPERTY_TYPE_NPC_Level3Up_Score>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::Level3Up_Score);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_NPC_Level4Up_Score { };
template<>  int& NPC::_Get_Property_<PROPERTY_TYPE_NPC_Level4Up_Score>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::Level4Up_Score);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_NPC_m_canBossRefresh { };
template<>  bool& NPC::_Get_Property_<PROPERTY_TYPE_NPC_m_canBossRefresh>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::m_canBossRefresh);
	return *(reinterpret_cast<bool*>(pc));
}

struct PROPERTY_TYPE_NPC_m_level { };
template<>  int& NPC::_Get_Property_<PROPERTY_TYPE_NPC_m_level>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(NPC, NPC::m_level);
	return *(reinterpret_cast<int*>(pc));
}

struct METHOD_TYPE_NPC_getLevel { };
template<>  int NPC::_Execute_Method_<METHOD_TYPE_NPC_getLevel>(int p0)
{
	return this->NPC::getLevel(p0);
}

struct METHOD_TYPE_NPC_setLeveUpScore { };
template<>  void NPC::_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore>(int p0, int p1)
{
	this->NPC::setLeveUpScore(p0, p1);
}

struct METHOD_TYPE_NPC_spawnEnemy { };
template<>  void NPC::_Execute_Method_<METHOD_TYPE_NPC_spawnEnemy>()
{
	this->NPC::spawnEnemy();
}

namespace behaviac
{
	// Source file: enemy

	class Assignment_bt_enemy_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_enemy_node1, Assignment);
		Assignment_bt_enemy_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_getEnemyType, int >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("enemyType") == 257823859u);
			pAgent->SetVariable("enemyType", opr, 257823859u);
			return result;
		}
	};

	class Assignment_bt_enemy_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_enemy_node8, Assignment);
		Assignment_bt_enemy_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("m_init_speed") == 552343623u);
			vector<float >& opr = (vector<float >&)pAgent->GetVariable<vector<float > >(552343623u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("enemyType") == 257823859u);
			int& opr_index = (int&)pAgent->GetVariable<int >(257823859u);
			pAgent->SetVariable("initSpeed", (opr)[opr_index], 1002713030u);
			return result;
		}
	};

	class Action_bt_enemy_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_enemy_node2, Action);
		Action_bt_enemy_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(1002713030u);
			((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_setSpeed, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class DecoratorLoop_bt_enemy_node3 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_enemy_node3, DecoratorLoop);
		DecoratorLoop_bt_enemy_node3()
		{
			m_bDecorateWhenChildEnds = true;
			m_bDoneWithinFrame = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Precondition_bt_enemy_attach9 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_attach9, Precondition);
		Precondition_bt_enemy_attach9()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_isAlive, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Assignment_bt_enemy_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_enemy_node5, Assignment);
		Assignment_bt_enemy_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			float& opr_p0 = (float&)pAgent->GetVariable<float >(1002713030u);
			float opr = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_getRandomSpeedByInitSpeed, float, float >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("randomSpeed") == 1466300189u);
			pAgent->SetVariable("randomSpeed", opr, 1466300189u);
			return result;
		}
	};

	class Action_bt_enemy_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_enemy_node7, Action);
		Action_bt_enemy_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("randomSpeed") == 1466300189u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(1466300189u);
			((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_setSpeed, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class WaitFrames_bt_enemy_node6 : public WaitFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFrames_bt_enemy_node6, WaitFrames);
		WaitFrames_bt_enemy_node6()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 30;
		}
	};

	class bt_enemy
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("enemy");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("Enemy");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("Enemy");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_enemy_node1* node1 = BEHAVIAC_NEW Assignment_bt_enemy_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("Enemy");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_enemy_node8* node8 = BEHAVIAC_NEW Assignment_bt_enemy_node8;
					node8->SetClassNameString("Assignment");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("Enemy");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					Action_bt_enemy_node2* node2 = BEHAVIAC_NEW Action_bt_enemy_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("Enemy");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					DecoratorLoop_bt_enemy_node3* node3 = BEHAVIAC_NEW DecoratorLoop_bt_enemy_node3;
					node3->SetClassNameString("DecoratorLoop");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("Enemy");
#endif
					node0->AddChild(node3);
					{
						Sequence* node4 = BEHAVIAC_NEW Sequence;
						node4->SetClassNameString("Sequence");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("Enemy");
#endif
						// attachments
						{
							Precondition_bt_enemy_attach9* attach9 = BEHAVIAC_NEW Precondition_bt_enemy_attach9;
							attach9->SetClassNameString("Precondition");
							attach9->SetId(9);
#if !BEHAVIAC_RELEASE
							attach9->SetAgentType("Enemy");
#endif
							node4->Attach(attach9, true, false, false);
							node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach9) != 0));
						}
						node3->AddChild(node4);
						{
							Assignment_bt_enemy_node5* node5 = BEHAVIAC_NEW Assignment_bt_enemy_node5;
							node5->SetClassNameString("Assignment");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("Enemy");
#endif
							node4->AddChild(node5);
							node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
						}
						{
							Action_bt_enemy_node7* node7 = BEHAVIAC_NEW Action_bt_enemy_node7;
							node7->SetClassNameString("Action");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("Enemy");
#endif
							node4->AddChild(node7);
							node4->SetHasEvents(node4->HasEvents() | node7->HasEvents());
						}
						{
							WaitFrames_bt_enemy_node6* node6 = BEHAVIAC_NEW WaitFrames_bt_enemy_node6;
							node6->SetClassNameString("WaitFrames");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("Enemy");
#endif
							node4->AddChild(node6);
							node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
						}
						node3->SetHasEvents(node3->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: enemy_fsm

	class State_bt_enemy_fsm_node1 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_enemy_fsm_node1, State);
		State_bt_enemy_fsm_node1()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class Precondition_bt_enemy_fsm_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_fsm_attach3, Precondition);
		Precondition_bt_enemy_fsm_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_getEnemyType, int >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("enemyType") == 257823859u);
			pAgent->SetVariable("enemyType", opr2, 257823859u);
			return result;
		}
	};

	class Precondition_bt_enemy_fsm_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_fsm_attach4, Precondition);
		Precondition_bt_enemy_fsm_attach4()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("m_init_speed") == 552343623u);
			vector<float >& opr2 = (vector<float >&)pAgent->GetVariable<vector<float > >(552343623u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			pAgent->SetVariable("initSpeed", opr2, 1002713030u);
			return result;
		}
	};

	class Precondition_bt_enemy_fsm_attach5 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_fsm_attach5, Precondition);
		Precondition_bt_enemy_fsm_attach5()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			float& opl_p0 = (float&)pAgent->GetVariable<float >(1002713030u);
			((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_setSpeed, void, float >(opl_p0);
			return result;
		}
	};

	class Transition_bt_enemy_fsm_attach6 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_enemy_fsm_attach6, Transition);
		Transition_bt_enemy_fsm_attach6()
		{
			this->SetTargetStateId(2);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_isAlive, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_enemy_fsm_node2 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_enemy_fsm_node2, State);
		State_bt_enemy_fsm_node2()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class Precondition_bt_enemy_fsm_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_fsm_attach7, Precondition);
		Precondition_bt_enemy_fsm_attach7()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("initSpeed") == 1002713030u);
			float& opr2_p0 = (float&)pAgent->GetVariable<float >(1002713030u);
			float opr2 = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_getRandomSpeedByInitSpeed, float, float >(opr2_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("randomSpeed") == 1466300189u);
			pAgent->SetVariable("randomSpeed", opr2, 1466300189u);
			return result;
		}
	};

	class Precondition_bt_enemy_fsm_attach8 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_enemy_fsm_attach8, Precondition);
		Precondition_bt_enemy_fsm_attach8()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("randomSpeed") == 1466300189u);
			float& opl_p0 = (float&)pAgent->GetVariable<float >(1466300189u);
			((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_setSpeed, void, float >(opl_p0);
			return result;
		}
	};

	class Transition_bt_enemy_fsm_attach15 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_enemy_fsm_attach15, Transition);
		Transition_bt_enemy_fsm_attach15()
		{
			this->SetTargetStateId(19);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_isAlive, bool >();
			bool opr2 = false;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_enemy_fsm_attach11 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_enemy_fsm_attach11, Transition);
		Transition_bt_enemy_fsm_attach11()
		{
			this->SetTargetStateId(16);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Enemy*)pAgent)->_Execute_Method_<METHOD_TYPE_Enemy_isAlive, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class WaitFramesState_bt_enemy_fsm_node16 : public WaitFramesState
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFramesState_bt_enemy_fsm_node16, WaitFramesState);
		WaitFramesState_bt_enemy_fsm_node16()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 3;
		}
	};

	class WaitTransition_bt_enemy_fsm_attach17 : public WaitTransition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitTransition_bt_enemy_fsm_attach17, WaitTransition);
		WaitTransition_bt_enemy_fsm_attach17()
		{
			this->SetTargetStateId(2);
		}
	protected:
	};

	class State_bt_enemy_fsm_node19 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_enemy_fsm_node19, State);
		State_bt_enemy_fsm_node19()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class bt_enemy_fsm
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("enemy_fsm");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("Enemy");
#endif
			// pars
			pBT->AddPar("Enemy", "int", "frameCount", "0");
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(1);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("Enemy");
#endif
				{
					State_bt_enemy_fsm_node1* node1 = BEHAVIAC_NEW State_bt_enemy_fsm_node1;
					node1->SetClassNameString("State");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("Enemy");
#endif
					// attachments
					{
						Precondition_bt_enemy_fsm_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_enemy_fsm_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("Enemy");
#endif
						node1->Attach(attach3, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					{
						Precondition_bt_enemy_fsm_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_enemy_fsm_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("Enemy");
#endif
						node1->Attach(attach4, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					{
						Precondition_bt_enemy_fsm_attach5* attach5 = BEHAVIAC_NEW Precondition_bt_enemy_fsm_attach5;
						attach5->SetClassNameString("Precondition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("Enemy");
#endif
						node1->Attach(attach5, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Transition_bt_enemy_fsm_attach6* attach6 = BEHAVIAC_NEW Transition_bt_enemy_fsm_attach6;
						attach6->SetClassNameString("Transition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("Enemy");
#endif
						node1->Attach(attach6, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					fsm->AddChild(node1);
					fsm->SetHasEvents(fsm->HasEvents() | node1->HasEvents());
				}
				{
					State_bt_enemy_fsm_node2* node2 = BEHAVIAC_NEW State_bt_enemy_fsm_node2;
					node2->SetClassNameString("State");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("Enemy");
#endif
					// attachments
					{
						Precondition_bt_enemy_fsm_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_enemy_fsm_attach7;
						attach7->SetClassNameString("Precondition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("Enemy");
#endif
						node2->Attach(attach7, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					{
						Precondition_bt_enemy_fsm_attach8* attach8 = BEHAVIAC_NEW Precondition_bt_enemy_fsm_attach8;
						attach8->SetClassNameString("Precondition");
						attach8->SetId(8);
#if !BEHAVIAC_RELEASE
						attach8->SetAgentType("Enemy");
#endif
						node2->Attach(attach8, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach8) != 0));
					}
					{
						Transition_bt_enemy_fsm_attach15* attach15 = BEHAVIAC_NEW Transition_bt_enemy_fsm_attach15;
						attach15->SetClassNameString("Transition");
						attach15->SetId(15);
#if !BEHAVIAC_RELEASE
						attach15->SetAgentType("Enemy");
#endif
						node2->Attach(attach15, false, false, true);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach15) != 0));
					}
					{
						Transition_bt_enemy_fsm_attach11* attach11 = BEHAVIAC_NEW Transition_bt_enemy_fsm_attach11;
						attach11->SetClassNameString("Transition");
						attach11->SetId(11);
#if !BEHAVIAC_RELEASE
						attach11->SetAgentType("Enemy");
#endif
						node2->Attach(attach11, false, false, true);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach11) != 0));
					}
					fsm->AddChild(node2);
					fsm->SetHasEvents(fsm->HasEvents() | node2->HasEvents());
				}
				{
					WaitFramesState_bt_enemy_fsm_node16* node16 = BEHAVIAC_NEW WaitFramesState_bt_enemy_fsm_node16;
					node16->SetClassNameString("WaitFramesState");
					node16->SetId(16);
#if !BEHAVIAC_RELEASE
					node16->SetAgentType("Enemy");
#endif
					// attachments
					{
						WaitTransition_bt_enemy_fsm_attach17* attach17 = BEHAVIAC_NEW WaitTransition_bt_enemy_fsm_attach17;
						attach17->SetClassNameString("WaitTransition");
						attach17->SetId(17);
#if !BEHAVIAC_RELEASE
						attach17->SetAgentType("Enemy");
#endif
						node16->Attach(attach17, false, false, true);
						node16->SetHasEvents(node16->HasEvents() | (Event::DynamicCast(attach17) != 0));
					}
					fsm->AddChild(node16);
					fsm->SetHasEvents(fsm->HasEvents() | node16->HasEvents());
				}
				{
					State_bt_enemy_fsm_node19* node19 = BEHAVIAC_NEW State_bt_enemy_fsm_node19;
					node19->SetClassNameString("State");
					node19->SetId(19);
#if !BEHAVIAC_RELEASE
					node19->SetAgentType("Enemy");
#endif
					fsm->AddChild(node19);
					fsm->SetHasEvents(fsm->HasEvents() | node19->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: hero

	class State_bt_hero_node1 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node1, State);
		State_bt_hero_node1()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_findAnNearestEnemy, void >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach2 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach2, Transition);
		Transition_bt_hero_attach2()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_hero_attach13 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach13, Transition);
		Transition_bt_hero_attach13()
		{
			this->SetTargetStateId(9);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy, bool >();
			bool opr2 = false;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_hero_node3 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node3, State);
		State_bt_hero_node3()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_EscapeEnemyCrash, void >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach8 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach8, Transition);
		Transition_bt_hero_attach8()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_hero_attach5 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach5, Transition);
		Transition_bt_hero_attach5()
		{
			this->SetTargetStateId(4);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_isWillBeCrashOnNearestEnemy, bool >();
			bool opr2 = false;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_hero_node4 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node4, State);
		State_bt_hero_node4()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_hasEnemyInFrontCanAttack, bool >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach6 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach6, Transition);
		Transition_bt_hero_attach6()
		{
			this->SetTargetStateId(9);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_hasEnemyInFrontCanAttack, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_hero_attach7 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach7, Transition);
		Transition_bt_hero_attach7()
		{
			this->SetTargetStateId(10);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_hasEnemyInFrontCanAttack, bool >();
			bool opr2 = false;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_hero_node9 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node9, State);
		State_bt_hero_node9()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_findAnEnemyAndAttack, void >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach11 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach11, Transition);
		Transition_bt_hero_attach11()
		{
			this->SetTargetStateId(10);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Get_Property_<PROPERTY_TYPE_Hero_m_isAI, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_hero_node10 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node10, State);
		State_bt_hero_node10()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_AdjustHeroPosition, void >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach12 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach12, Transition);
		Transition_bt_hero_attach12()
		{
			this->SetTargetStateId(14);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Get_Property_<PROPERTY_TYPE_Hero_m_isAI, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_hero_node14 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_hero_node14, State);
		State_bt_hero_node14()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_wait20Frame, bool >();
			return BT_RUNNING;
		}
	};

	class Transition_bt_hero_attach15 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_hero_attach15, Transition);
		Transition_bt_hero_attach15()
		{
			this->SetTargetStateId(1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opl = ((Hero*)pAgent)->_Execute_Method_<METHOD_TYPE_Hero_wait20Frame, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_hero
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("hero");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("Hero");
#endif
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(1);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("Hero");
#endif
				{
					State_bt_hero_node1* node1 = BEHAVIAC_NEW State_bt_hero_node1;
					node1->SetClassNameString("State");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach2* attach2 = BEHAVIAC_NEW Transition_bt_hero_attach2;
						attach2->SetClassNameString("Transition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("Hero");
#endif
						node1->Attach(attach2, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Transition_bt_hero_attach13* attach13 = BEHAVIAC_NEW Transition_bt_hero_attach13;
						attach13->SetClassNameString("Transition");
						attach13->SetId(13);
#if !BEHAVIAC_RELEASE
						attach13->SetAgentType("Hero");
#endif
						node1->Attach(attach13, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach13) != 0));
					}
					fsm->AddChild(node1);
					fsm->SetHasEvents(fsm->HasEvents() | node1->HasEvents());
				}
				{
					State_bt_hero_node3* node3 = BEHAVIAC_NEW State_bt_hero_node3;
					node3->SetClassNameString("State");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach8* attach8 = BEHAVIAC_NEW Transition_bt_hero_attach8;
						attach8->SetClassNameString("Transition");
						attach8->SetId(8);
#if !BEHAVIAC_RELEASE
						attach8->SetAgentType("Hero");
#endif
						node3->Attach(attach8, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach8) != 0));
					}
					{
						Transition_bt_hero_attach5* attach5 = BEHAVIAC_NEW Transition_bt_hero_attach5;
						attach5->SetClassNameString("Transition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("Hero");
#endif
						node3->Attach(attach5, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					fsm->AddChild(node3);
					fsm->SetHasEvents(fsm->HasEvents() | node3->HasEvents());
				}
				{
					State_bt_hero_node4* node4 = BEHAVIAC_NEW State_bt_hero_node4;
					node4->SetClassNameString("State");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach6* attach6 = BEHAVIAC_NEW Transition_bt_hero_attach6;
						attach6->SetClassNameString("Transition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("Hero");
#endif
						node4->Attach(attach6, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					{
						Transition_bt_hero_attach7* attach7 = BEHAVIAC_NEW Transition_bt_hero_attach7;
						attach7->SetClassNameString("Transition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("Hero");
#endif
						node4->Attach(attach7, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					fsm->AddChild(node4);
					fsm->SetHasEvents(fsm->HasEvents() | node4->HasEvents());
				}
				{
					State_bt_hero_node9* node9 = BEHAVIAC_NEW State_bt_hero_node9;
					node9->SetClassNameString("State");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach11* attach11 = BEHAVIAC_NEW Transition_bt_hero_attach11;
						attach11->SetClassNameString("Transition");
						attach11->SetId(11);
#if !BEHAVIAC_RELEASE
						attach11->SetAgentType("Hero");
#endif
						node9->Attach(attach11, false, false, true);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach11) != 0));
					}
					fsm->AddChild(node9);
					fsm->SetHasEvents(fsm->HasEvents() | node9->HasEvents());
				}
				{
					State_bt_hero_node10* node10 = BEHAVIAC_NEW State_bt_hero_node10;
					node10->SetClassNameString("State");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach12* attach12 = BEHAVIAC_NEW Transition_bt_hero_attach12;
						attach12->SetClassNameString("Transition");
						attach12->SetId(12);
#if !BEHAVIAC_RELEASE
						attach12->SetAgentType("Hero");
#endif
						node10->Attach(attach12, false, false, true);
						node10->SetHasEvents(node10->HasEvents() | (Event::DynamicCast(attach12) != 0));
					}
					fsm->AddChild(node10);
					fsm->SetHasEvents(fsm->HasEvents() | node10->HasEvents());
				}
				{
					State_bt_hero_node14* node14 = BEHAVIAC_NEW State_bt_hero_node14;
					node14->SetClassNameString("State");
					node14->SetId(14);
#if !BEHAVIAC_RELEASE
					node14->SetAgentType("Hero");
#endif
					// attachments
					{
						Transition_bt_hero_attach15* attach15 = BEHAVIAC_NEW Transition_bt_hero_attach15;
						attach15->SetClassNameString("Transition");
						attach15->SetId(15);
#if !BEHAVIAC_RELEASE
						attach15->SetAgentType("Hero");
#endif
						node14->Attach(attach15, false, false, true);
						node14->SetHasEvents(node14->HasEvents() | (Event::DynamicCast(attach15) != 0));
					}
					fsm->AddChild(node14);
					fsm->SetHasEvents(fsm->HasEvents() | node14->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: npc

	class Action_bt_npc_node0 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_npc_node0, Action);
		Action_bt_npc_node0()
		{
			method_p0 = 1;
			method_p1 = 30;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((NPC*)pAgent)->_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
		int method_p0;
		int method_p1;
	};

	class Action_bt_npc_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_npc_node2, Action);
		Action_bt_npc_node2()
		{
			method_p0 = 2;
			method_p1 = 200;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((NPC*)pAgent)->_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
		int method_p0;
		int method_p1;
	};

	class Action_bt_npc_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_npc_node3, Action);
		Action_bt_npc_node3()
		{
			method_p0 = 3;
			method_p1 = 500;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((NPC*)pAgent)->_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
		int method_p0;
		int method_p1;
	};

	class Action_bt_npc_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_npc_node4, Action);
		Action_bt_npc_node4()
		{
			method_p0 = 4;
			method_p1 = 800;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((NPC*)pAgent)->_Execute_Method_<METHOD_TYPE_NPC_setLeveUpScore, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
		int method_p0;
		int method_p1;
	};

	class DecoratorLoop_bt_npc_node5 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_npc_node5, DecoratorLoop);
		DecoratorLoop_bt_npc_node5()
		{
			m_bDecorateWhenChildEnds = true;
			m_bDoneWithinFrame = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Parallel_bt_npc_node9 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_npc_node9, Parallel);
		Parallel_bt_npc_node9()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_npc_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_npc_node6, Action);
		Action_bt_npc_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((NPC*)pAgent)->_Execute_Method_<METHOD_TYPE_NPC_spawnEnemy, void >();
			return BT_SUCCESS;
		}
	};

	class WaitFrames_bt_npc_node8 : public WaitFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFrames_bt_npc_node8, WaitFrames);
		WaitFrames_bt_npc_node8()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return (behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(4274124659u);
		}
	};

	class Assignment_bt_npc_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_npc_node11, Assignment);
		Assignment_bt_npc_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			((NPC*)pAgent)->_Get_Property_<PROPERTY_TYPE_NPC_m_canBossRefresh, bool >() = opr;
			return result;
		}
	};

	class WaitFrames_bt_npc_node12 : public WaitFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFrames_bt_npc_node12, WaitFrames);
		WaitFrames_bt_npc_node12()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 50;
		}
	};

	class bt_npc
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("npc");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("NPC");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("NPC");
#endif
				pBT->AddChild(node1);
				{
					Action_bt_npc_node0* node0 = BEHAVIAC_NEW Action_bt_npc_node0;
					node0->SetClassNameString("Action");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("NPC");
#endif
					node1->AddChild(node0);
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_npc_node2* node2 = BEHAVIAC_NEW Action_bt_npc_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("NPC");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_npc_node3* node3 = BEHAVIAC_NEW Action_bt_npc_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("NPC");
#endif
					node1->AddChild(node3);
					node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_npc_node4* node4 = BEHAVIAC_NEW Action_bt_npc_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("NPC");
#endif
					node1->AddChild(node4);
					node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorLoop_bt_npc_node5* node5 = BEHAVIAC_NEW DecoratorLoop_bt_npc_node5;
					node5->SetClassNameString("DecoratorLoop");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("NPC");
#endif
					node1->AddChild(node5);
					{
						Parallel_bt_npc_node9* node9 = BEHAVIAC_NEW Parallel_bt_npc_node9;
						node9->SetClassNameString("Parallel");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("NPC");
#endif
						node5->AddChild(node9);
						{
							Sequence* node7 = BEHAVIAC_NEW Sequence;
							node7->SetClassNameString("Sequence");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("NPC");
#endif
							node9->AddChild(node7);
							{
								Action_bt_npc_node6* node6 = BEHAVIAC_NEW Action_bt_npc_node6;
								node6->SetClassNameString("Action");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("NPC");
#endif
								node7->AddChild(node6);
								node7->SetHasEvents(node7->HasEvents() | node6->HasEvents());
							}
							{
								WaitFrames_bt_npc_node8* node8 = BEHAVIAC_NEW WaitFrames_bt_npc_node8;
								node8->SetClassNameString("WaitFrames");
								node8->SetId(8);
#if !BEHAVIAC_RELEASE
								node8->SetAgentType("NPC");
#endif
								node7->AddChild(node8);
								node7->SetHasEvents(node7->HasEvents() | node8->HasEvents());
							}
							node9->SetHasEvents(node9->HasEvents() | node7->HasEvents());
						}
						{
							Sequence* node10 = BEHAVIAC_NEW Sequence;
							node10->SetClassNameString("Sequence");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("NPC");
#endif
							node9->AddChild(node10);
							{
								Assignment_bt_npc_node11* node11 = BEHAVIAC_NEW Assignment_bt_npc_node11;
								node11->SetClassNameString("Assignment");
								node11->SetId(11);
#if !BEHAVIAC_RELEASE
								node11->SetAgentType("NPC");
#endif
								node10->AddChild(node11);
								node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
							}
							{
								WaitFrames_bt_npc_node12* node12 = BEHAVIAC_NEW WaitFrames_bt_npc_node12;
								node12->SetClassNameString("WaitFrames");
								node12->SetId(12);
#if !BEHAVIAC_RELEASE
								node12->SetAgentType("NPC");
#endif
								node10->AddChild(node12);
								node10->SetHasEvents(node10->HasEvents() | node12->HasEvents());
							}
							node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
						}
						node5->SetHasEvents(node5->HasEvents() | node9->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	class CppGenerationManager : GenerationManager
	{
	public:
		CppGenerationManager()
		{
			SetInstance(this);
		}

		virtual void RegisterBehaviorsImplement()
		{
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("enemy", bt_enemy::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("enemy_fsm", bt_enemy_fsm::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("hero", bt_hero::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("npc", bt_npc::Create);
		}
	};

	CppGenerationManager _cppGenerationManager_;
}
